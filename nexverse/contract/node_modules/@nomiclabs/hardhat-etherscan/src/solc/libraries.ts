import { pluginName } from "../constants";

import { HardhatEtherscanPluginError } from "../errors";
import { ContractInformation, ResolvedLinks } from "./bytecode";

export interface Libraries {
  // This may be a fully qualified name
  [libraryName: string]: string;
}

export type LibraryNames = Array<{
  sourceName: string;
  libName: string;
}>;

interface LibrariesStdInput {
  [sourceName: string]: {
    [libraryName: string]: any;
  };
}

export async function getLibraryLinks(
  contractInformation: ContractInformation,
  libraries: Libraries
) {
  const allLibraries = getLibraryNames(
    contractInformation.contract.evm.bytecode.linkReferences
  );
  const detectableLibraries = getLibraryNames(
    contractInformation.contract.evm.deployedBytecode.linkReferences
  );
  const undetectableLibraries: LibraryNames = allLibraries.filter(
    (lib) =>
      !detectableLibraries.some((detectableLib) => {
        return (
          detectableLib.sourceName === lib.sourceName &&
          detectableLib.libName === lib.libName
        );
      })
  );

  // Resolve and normalize library links given by user
  const normalizedLibraries = await normalizeLibraries(
    allLibraries,
    detectableLibraries,
    undetectableLibraries,
    libraries,
    contractInformation.contractName
  );

  // Merge library links
  const mergedLibraryLinks = mergeLibraries(
    normalizedLibraries,
    contractInformation.libraryLinks
  );

  const mergedLibraries = getLibraryNames(mergedLibraryLinks);
  if (mergedLibraries.length < allLibraries.length) {
    // TODO: up